<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>

	<!--
	包含以下子元素（有严格的顺序）：
    <properties> (0个或1个)
    <classPathEntry> (0个或多个)
    <context> (1个或多个)
	-->

	<!--
		在MBG的配置中，至少需要有一个<context>元素。
		context:生成一组对象的环境
		id:必选，上下文id，用于在生成错误时提示
		defaultModelType:指定生成对象的样式
			1，conditional：类似hierarchical；
			2，flat：所有内容（主键，blob）等全部生成在一个对象中；这种模型最简单，推荐使用;
			3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)
		targetRuntime:
			1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；
			2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；
		introspectedColumnImpl：类全限定名，用于扩展MBG
	-->
	
	<!-- context中元素的顺序为
	"context" 的内容必须匹配 "
	(property*,plugin*,commentGenerator?,jdbcConnection,javaTypeResolver?,javaModelGenerator,sqlMapGenerator?,javaClientGenerator?,table+) 
	-->

    <context id="MysqlTables" defaultModelType="flat" targetRuntime="MyBatis3Simple">
    	
		<property name="beginningDelimiter" value="`"/>
		<property name="endingDelimiter" value="`"/> 
		<!-- 生成的Java文件的编码-->
		<property name="javaFileEncoding" value="UTF-8"/>
		<!-- 格式化java代码-->
		<property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
		<!-- 格式化XML代码-->
		<property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>

		<!-- mysql分页插件 -->
<!--    	<plugin type="com.xxg.mybatis.plugins.MySQLLimitPlugin"></plugin>-->

		<!-- 这里的type里写的是你的实现类的类全路径 -->
		<commentGenerator type="org.mybatis.generator.MyCommentGenerator"/>

		<!--数据库连接信息-->
		<jdbcConnection 
			driverClass="com.mysql.jdbc.Driver" 
			connectionURL="jdbc:mysql://localhost:3306/mysql?useUnicode=true"
			userId="root" 
			password="root">
		</jdbcConnection> 
		
		<!-- java类型处理器
			用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；
			注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型；
		-->

		<javaTypeResolver type="org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl">
			<!--
				true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型
				false：默认,
				   scale>0;length>18：使用BigDecimal;
				   scale=0;length[10,18]：使用Long；
				   scale=0;length[5,9]：使用Integer；
				   scale=0;length<5：使用Short；
			-->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>
		
		<!-- java模型创建器，是必须要的元素
			负责：1，key类（见context的defaultModelType）；2，java类；3，查询类;
			targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制；
			targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录
		 -->
		<!-- 生成模型的包名和位置entity.java -->
        <javaModelGenerator targetPackage="com.xin.entity" targetProject="E:\workplace\mybatisGenerator\src\main\java">
            <property name="enableSubPackages" value="true"/>
            <property name="trimStrings" value="true"/>
		</javaModelGenerator>

		<!-- 生成的映射文件包名和位置 xml-->  
        <sqlMapGenerator targetPackage="com.xin.mapper" targetProject="E:\workplace\mybatisGenerator\src\main\java">
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>
		
		<!-- 生成DAO的包名和位置 接口java-->
        <javaClientGenerator type="XMLMAPPER" targetPackage="com.xin.dao" targetProject="E:\workplace\mybatisGenerator\src\main\java">
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>

		<!--要生成的表名,多张表就复制多行-->
		<table tableName="func" domainObjectName="func"/>
		<table tableName="general_log" domainObjectName="generalLog"/>


    </context>
</generatorConfiguration>

